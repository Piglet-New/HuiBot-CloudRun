name: Deploy Cloud Run

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.PROJECT_ID }}
  REGION: ${{ secrets.REGION }}
  SERVICE_NAME: ${{ secrets.SERVICE_NAME }}
  REPO_NAME: huibot
  IMAGE_NAME: huibot
  AR_HOST: ${{ secrets.REGION }}-docker.pkg.dev
  BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
  WEBHOOK_SECRET: ${{ secrets.WEBHOOK_SECRET }}
  ADMIN_CHAT_ID: ${{ secrets.ADMIN_CHAT_ID }}
  DATABASE_URL: ${{ secrets.DATABASE_URL }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.PROJECT_ID }}
          install_components: 'beta'

      - name: Set gcloud project
        run: gcloud config set project $PROJECT_ID

      - name: Enable required APIs
        run: |
          gcloud services enable \
            artifactregistry.googleapis.com \
            run.googleapis.com \
            cloudbuild.googleapis.com \
            --project $PROJECT_ID
          sleep 15

      - name: Ensure Artifact Registry repo exists
        run: |
          gcloud artifacts repositories describe "$REPO_NAME" \
            --location="$REGION" >/dev/null 2>&1 || \
          gcloud artifacts repositories create "$REPO_NAME" \
            --repository-format=docker \
            --location="$REGION"

      - name: Configure Docker auth
        run: gcloud auth configure-docker ${AR_HOST} -q

      - name: Build & Push image
        run: |
          IMAGE="${AR_HOST}/${PROJECT_ID}/${REPO_NAME}/${IMAGE_NAME}:$GITHUB_SHA"
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV
          docker build -t "$IMAGE" .
          docker push "$IMAGE"

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy "$SERVICE_NAME" \
            --image "$IMAGE" \
            --region "$REGION" \
            --platform managed \
            --allow-unauthenticated \
            --port 8080 \
            --set-env-vars BOT_TOKEN="${BOT_TOKEN}",ADMIN_CHAT_ID="${ADMIN_CHAT_ID}",WEBHOOK_BASE="",WEBHOOK_SECRET="${WEBHOOK_SECRET}",DATABASE_URL="${DATABASE_URL}"

      # ðŸ”§ BÆ°á»›c bá»• sung: Ä‘áº£m báº£o ENV luÃ´n Ä‘Æ°á»£c ghi Ä‘Ã¨ Ä‘Ãºng sau má»—i láº§n deploy
      - name: Update env vars on Cloud Run
        run: |
          gcloud run services update "$SERVICE_NAME" \
            --region "$REGION" \
            --update-env-vars BOT_TOKEN="${BOT_TOKEN}",WEBHOOK_SECRET="${WEBHOOK_SECRET}",DB_PATH="db/hui.db" \
            --platform=managed

      - name: Get Service URL
        id: url
        run: |
          URL=$(gcloud run services describe "$SERVICE_NAME" --region "$REGION" --format='value(status.url)')
          echo "url=$URL" >> $GITHUB_OUTPUT
          echo "Service URL: $URL"

      # âœ… Sá»­a URL webhook Ä‘Ãºng dáº¡ng ?secret=... (khÃ´ng dÃ¹ng /webhook/<secret>)
      - name: Set Telegram webhook
        run: |
          URL="${{ steps.url.outputs.url }}"
          curl -sS -X POST "https://api.telegram.org/bot${BOT_TOKEN}/setWebhook" \
            -H "Content-Type: application/json" \
            -d "{\"url\":\"${URL}/webhook?secret=${WEBHOOK_SECRET}\",\"allowed_updates\":[\"message\",\"callback_query\"]}"
